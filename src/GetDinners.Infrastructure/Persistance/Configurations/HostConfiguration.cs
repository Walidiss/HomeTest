using GetDinners.Domain.Hosts;
using GetDinners.Domain.Hosts.ValueObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GetDinners.Infrastructure.Persistance.Configurations
{
    internal sealed class HostConfiguration : IEntityTypeConfiguration<Host>
    {
        public void Configure(EntityTypeBuilder<Host> builder)
        {
            ConfigureHostsTable(builder);
            ConfigureHostDinnersIdsTable(builder);
            ConfigureHostMenuIdsTable(builder);
        }

        private void ConfigureHostsTable(EntityTypeBuilder<Host> builder)
        {
            builder.ToTable("Hosts");

            // Configure the primary key
            builder.HasKey(x => x.Id);


            // Map the Id property to a column, assuming HostId is encapsulated and 
            // uses a Value Object pattern with a backing field.
            builder.Property(x => x.Id) // The Id is manually set, not generated by the DB.
                .ValueGeneratedNever()
                .HasConversion(
                id => id.Value,
                value => HostId.Create(value));

            builder.Property(x => x.FirstName)
                .HasMaxLength(100);

            builder.Property(x => x.LastName)
                .HasMaxLength(100);

            builder.Property(x => x.ProfileImage)
                .HasMaxLength(100);

            builder.OwnsOne(x => x.AverageRating, ar =>
            {
                ar.Property(r => r.Value)
                .HasColumnName("AverageRating");

            });

            builder.OwnsOne(x => x.UserId, us => {
                us.Property(r => r.Value)
                    .HasColumnName("UserId");      
            });

        }

        private void ConfigureHostMenuIdsTable(EntityTypeBuilder<Host> builder)
        {
            builder.OwnsMany(m => m.MenuIds, menuBuilder =>
            {
                menuBuilder.ToTable("HostMenuIds");
                menuBuilder
                .WithOwner()
                .HasForeignKey("HostId");

                menuBuilder.HasKey("Id");

                menuBuilder
               .Property(x => x.Value)
               .HasColumnName("MenuId")
               .ValueGeneratedNever();
            });
            builder.Metadata
                .FindNavigation(nameof(Host.MenuIds))!
                .SetPropertyAccessMode(PropertyAccessMode.Field);
        }


        private void ConfigureHostDinnersIdsTable(EntityTypeBuilder<Host> builder)
        {
            builder.OwnsMany(m => m.DinnerIds, dinnerBuilder =>
            {
                dinnerBuilder.ToTable("HostDinnerIds");
                dinnerBuilder
                .WithOwner()
                .HasForeignKey("HostId");

                dinnerBuilder.HasKey("Id");

                dinnerBuilder
               .Property(x => x.Value)
               .HasColumnName("DinnerId")
               .ValueGeneratedNever();
            });
            builder.Metadata
                .FindNavigation(nameof(Host.DinnerIds))!
                .SetPropertyAccessMode(PropertyAccessMode.Field);
        }


    }
}
